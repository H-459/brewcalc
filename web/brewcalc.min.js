!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.brewcalc=e():t.brewcalc=e()}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e),n.d(e,"convert",(function(){return M})),n.d(e,"convertMeasurableValue",(function(){return O})),n.d(e,"calcOriginalGravity",(function(){return A})),n.d(e,"calcFinalGravity",(function(){return L})),n.d(e,"calcBoilGravity",(function(){return J})),n.d(e,"calcColor",(function(){return W})),n.d(e,"srmToCss",(function(){return K})),n.d(e,"srmToRgb",(function(){return H})),n.d(e,"calcABV",(function(){return X})),n.d(e,"bitternessIbuRager",(function(){return R})),n.d(e,"bitternessIbuTinseth",(function(){return k})),n.d(e,"bitternessRatio",(function(){return z})),n.d(e,"calculateRecipeBeerJSON",(function(){return Y})),n.d(e,"calcBoilVolumes",(function(){return T})),n.d(e,"calcMashVolumes",(function(){return G})),n.d(e,"calcMashGrainWeight",(function(){return U})),n.d(e,"recalculateMashSteps",(function(){return E})),n.d(e,"calcCalories",(function(){return y})),n.d(e,"carbonation",(function(){return h})),n.d(e,"yeastCount",(function(){return d})),n.d(e,"yeastNeeded",(function(){return p})),n.d(e,"yeastStarterGrow",(function(){return b}));const r=t=>(t=>t/.0295735)(t)/128,a=t=>1.8*t+32,o=t=>1111.14*t-616.868-630.272*Math.pow(t,2)+135.997*Math.pow(t,3),u=t=>t.reduce((t,e)=>t+e,0),i=t=>!!Array.isArray(t)&&t.length>0;function l(t,e=0){return"number"==typeof t?Number(t.toFixed(e)):null}const s=(t,e)=>({unit:t.unit,value:l(t.value,e)}),c="Liquid",m="Dry",f="Slant",p=(t,e,n)=>t*(1e3*e)*n/1e3,d=({amount:t,form:e,cultureDate:n},r=(new Date).toString(),a=8,o=1)=>{switch(e){case m:return a*t*1e3;case c:return((t,e=(new Date).toString())=>100-.7*Math.floor((Date.parse(t)-Date.parse(e))/864e5))(r,n)/100*100*t;case f:return o*t*1e3;default:throw new Error("NotImplementedError")}},v=t=>2.33-.67*t,b=(t,e,n,a)=>{const u=r(e),i=1e3*(u*(n-1)*1e3/42/2.204);const l=(s=t/i)<1.4?1.4:s>=1.4&&s<=3.5&&v(s)>0?v(s):0;var s;const c=i*l+t;return{growthRate:l,endingCount:c,pitchRate:1e3*c/o(n)/(a/1e3)}},g=(t,e)=>Math.max(0,-16.6999-.0101059*e+.00116512*e*e+.173354*e*t+4.24267*t-.0684226*t*t),_=t=>Math.max(32,a(t)),h=(t,e,n)=>{const a=((t,e,n)=>15.195*n*(t-3.0378+.050062*e-26555e-8*e*e))(t,_(e),r(n));return{kegPressure:g(t,_(e)),kegSugar:.5*a,cornSugar:a,dme:1.538*a}},y=(t,e)=>((t,e)=>1881.22*e*((t-e)/(1.775-t)))(t,e)+((t,e)=>3550*e*(.1808*t+.8192*e-1.0004))(t,e);var w={mass:{metric:{toBase:t=>t,fromBase:t=>t,units:{mg:{ratio:.001},g:{ratio:1},kg:{ratio:1e3}}},us:{toBase:t=>453.592*t,fromBase:t=>t/453.592,units:{lb:{ratio:1},oz:{ratio:1/16}}}},volume:{metric:{toBase:t=>t,fromBase:t=>t,units:{l:{ratio:1},ml:{ratio:.001}}},imperial:{toBase:t=>1.136523*t,fromBase:t=>t/1.136523,units:{ifloz:{ratio:1/40},ipt:{ratio:.5},iqt:{ratio:1},igal:{ratio:4},ibbl:{ratio:144}}},us:{toBase:t=>.946353*t,fromBase:t=>t/.946353,units:{tsp:{ratio:1/192},tbsp:{ratio:1/64},floz:{ratio:1/32},cup:{ratio:1/4},pt:{ratio:.5},qt:{ratio:1},gal:{ratio:4},bbl:{ratio:124}}}},color:{lovibond:{toBase:t=>1.3546*t-.76,fromBase:t=>(t+.76)/1.3546,units:{Lovi:{ratio:1}}},ebc:{toBase:t=>.508*t,fromBase:t=>1.97*t,units:{EBC:{ratio:1}}},srm:{toBase:t=>t,fromBase:t=>t,units:{SRM:{ratio:1},srm:{ratio:1}}}},gravity:{sg:{toBase:t=>t,fromBase:t=>t,units:{sg:{ratio:1,precision:4}}},plato:{toBase:t=>1+t/(258.6-t/258.2*227.1),fromBase:o,units:{plato:{ratio:1}}},brix:{toBase:t=>t/(258.6-t/258.2*227.1)+1,fromBase:t=>1262.7749*t-669.5622-775.6821*Math.pow(t,2)+182.4601*Math.pow(t,3),units:{brix:{ratio:1}}}},temperature:{celsius:{toBase:t=>t,fromBase:t=>t,units:{C:{ratio:1,precision:0}}},fahrenheit:{toBase:t=>(t-32)/1.8,fromBase:a,units:{F:{ratio:1,precision:0}}}},time:{time:{toBase:t=>t,fromBase:t=>t,units:{sec:{ratio:1/60},min:{ratio:1},hr:{ratio:60},day:{ratio:1440},week:{ratio:10080},month:{ratio:43200},year:{ratio:525600}}}},pressure:{pressure:{toBase:t=>t,fromBase:t=>t,units:{kPa:{ratio:1},atm:{ratio:101.325},bar:{ratio:100},psi:{ratio:6.894757}}}}};const B=(t,e)=>+t.toFixed(e),M=(t,e,n,r)=>{if(null==t)throw new Error("Unable to convert null or undefined!");let a=null,o=null;for(const t in w){const r=w[t];for(const t in r){const u=r[t];u.units.hasOwnProperty(e)&&(a={unit:u.units[e],system:u}),u.units.hasOwnProperty(n)&&(o={unit:u.units[n],system:u})}if(null!=a&&null==o)throw new Error(`Unable to convert [${t}] unit [${e}] to [${n}]!`);if(null==a&&null!=o)throw new Error(`Unable to convert [${e}] to [${t}] unit [${n}]!`);if(null!=a&&null!=o)break}if(null==a)throw new Error(`Unit not found [${e}]!`);if(null==o)throw new Error(`Unit not found [${n}]!`);const u=null!=o.unit.precision?o.unit.precision:2,i=null!=r?r:u;if(e===n)return B(t,i);let l=t*a.unit.ratio;return a.system!==o.system&&(l=o.system.fromBase(a.system.toBase(l))),l/=o.unit.ratio,B(l,i)},O=(t,e,n=4)=>M(t.value,t.unit,e,n),j=(t={})=>({add_to_boil:"add_to_boil"===t.use,add_to_mash:!t.use||"add_to_mash"===t.use}),x=(t={})=>"add_to_boil"===t.use?t.time.value:0,S=(t,e)=>t*e,P=(t="")=>"pellet"===t?1.1:1,$=(t="",e,n=0)=>P(t)*(t=>1.65*Math.pow(125e-6,t-1))(e)*(t=>(1-Math.exp(-.04*t))/4.15)(n),k=(t,e,n)=>({value:u(t.map(({amount:t,alpha_acid:r,form:a,timing:o})=>{if(!j(o).add_to_boil)return 0;const u=S(O(t,"oz"),r.value);return $(a,O(e,"sg"),x(o))*u*74.89/O(n,"gal")})),unit:"IBUs"}),z=(t,e)=>t/e,C=(t,e,n)=>{if(!j(t.timing).add_to_boil)return 0;var r;return(r=Math.floor(x(t.timing)+.5),(18.11+13.86*Math.tanh((r-31.32)/18.27))*P(t.form)/100)*S(t.amount.value,t.alpha_acid.value)*74.89/n.value/(1+((a=e.value)<=1.05?0:(a-1.05)/.2));var a},R=(t,e,n)=>({value:u(t.map(t=>C(t,e,n))),unit:"IBUs"});function E(t,e,n){let r=0,a=e.value;const o=O(n,"kg");return t.map((t,e)=>{const n=(u=t.step_temperature,function(t){return null!=t&&"object"==typeof t}(i=u)&&i.hasOwnProperty("value")&&i.hasOwnProperty("unit")?u.value:null);var u,i;switch(t.type){case"decoction":{const{amount:e}=((t,e,n,r,a=0,o=0,u=0)=>{const i=.652*r+n;let l=(.38*r+o*((t,e,n)=>(t*=.8)>0&&e<t?n*e/t:n)(u,i,a)+n)/(.38*r+n)*(e-t)/(100-t);return l>1&&(l=1),{amount:{value:i*l,unit:"l"}}})(a,n,r,o);return Object.assign(Object.assign({},t),{amount:e})}case"infusion":{const{amount:u,infuse_temperature:i}=((t,e,n,r,a)=>{const o=r>0?100:.38*(e-t)/2.5+e;return{infuse_temperature:{unit:"C",value:o},amount:{unit:"l",value:(.38*a+n)*(e-t)/(o-e)}}})(a,n,r,e,o);return r+=u.value,a=n,Object.assign(Object.assign({},t),{infuse_temperature:i,amount:u})}default:return t}})}const U=t=>({value:u(t.map(({timing:t,type:e,amount:n})=>"grain"===e&&j(t).add_to_mash?O(n,"lb"):0)),unit:"lb"});const D={pre_boil_size:{value:0,unit:"gal"},boil_time:{value:0,unit:"min"}},I=t=>O(t,"gal"),G=(t,e,n,r)=>{const a=((t=[])=>({value:u(t.map(({type:t,amount:e})=>"infusion"===t?I(e):0)),unit:"gal"}))(e),o={value:.12*O(n,"lb"),unit:"gal"};const i=null!=r.mash_tun?I(r.mash_tun.loss):0,l={value:I(t)+o.value-a.value+i,unit:"gal"};return{mash_volume:a,sparge_volume:l,total_volume:{value:a.value+l.value,unit:"gal"}}},T=(t,e=D,n)=>{const r=e||D,a=I(t);let o=0,u=0;null!=n&&null!=n.brew_kettle&&(o=I(n.brew_kettle.loss),u=I(n.brew_kettle.boil_rate_per_hour));return{pre_boil_size:{value:a+u*r.boil_time.value/60+o+.04*a,unit:"gal"}}},q=t=>({value:.01*t.value*46/1e3+1,unit:"sg"}),F=(t,e={value:100,unit:"%"},n={value:0,unit:"%"})=>{const r=O(t.amount,"lb");var a;return(O(null!=(a=t.yield).potential?a.potential:null!=a.fine_grind?q(a.fine_grind):null!=a.coarse_grind?q(a.coarse_grind):{value:0,unit:"sg"},"sg")-1)*r*((1-n.value/100)*((t,e,n=1)=>"extract"===t||"sugar"===t||"dry extract"===t?n:e)(t.type,e.value/100))},N=(t,e,n)=>u(t.map(t=>F(t,e.brewhouse,n))),V=(t,e)=>1+e/O(t,"gal"),A=(t,e,n)=>({unit:"sg",value:V(t,N(e,n))}),L=(t,e,n,r)=>({unit:"sg",value:V(t,N(e,n,r[0].attenuation))}),J=(t,e,n)=>{return{unit:"sg",value:(r=O(t,"gal"),a=O(e,"gal"),o=O(n,"sg"),1+(o-1)*r/a)};var r,a,o},W=(t,e)=>{const n=t.map(t=>{return e=O(t.amount,"lb"),(n=O(t.color,"Lovi"))>.56?e*n:0;var e,n});var r;return{unit:"SRM",value:(r=u(n)/O(e,"gal"),1.4922*Math.pow(r,.6859))}},H=t=>({r:Math.round(Math.min(255,Math.max(0,255*Math.pow(.975,t)))),g:Math.round(Math.min(255,Math.max(0,255*Math.pow(.88,t)))),b:Math.round(Math.min(255,Math.max(0,255*Math.pow(.7,t))))}),K=t=>{const e=H(t);return`rgb(${e.r}, ${e.g}, ${e.b})`},Q=(t,e)=>{const n=o(t);return(n-(.1808*n+.8192*o(e)))/(2.0665-.010665*n)*(e/.79661)},X=(t,e)=>({value:Q(O(t,"sg"),O(e,"sg")),unit:"%"}),Y=(t,e,n)=>{const{batch_size:r,boil:a,efficiency:o,ingredients:u}=t,{fermentable_additions:l,hop_additions:c,culture_additions:m}=u;let f={unit:"sg",value:null},p={unit:"sg",value:null},d={unit:"SRM",value:null},v={unit:"IBUs",value:null},b={unit:"%",value:null},g=null,_=null,h=null;if(i(l)){f=A(r,l,o);const t={name:"Default Culture",type:"ale",form:"liquid",attenuation:{value:75,unit:"%"}};p=L(r,l,o,i(m)?m:[t]),b=X(f,p);const{pre_boil_size:u}=T(r,a,n);if(g={pre_boil_size:u},e){const t=U(l),r=E(e.mash_steps,e.grain_temperature,t),{sparge_volume:a,mash_volume:o,total_volume:i}=G(u,r,t,n);g=Object.assign(Object.assign({},g),{sparge_volume:a,mash_volume:o,total_volume:i}),_=Object.assign(Object.assign({},e),{mash_steps:(y=r,w=a,y.map(t=>"sparge"===t.type?Object.assign(Object.assign({},t),{amount:w}):t))})}if(a&&(h=Object.assign(Object.assign({},a),{pre_boil_size:u})),d=W(l,r),i(c)){const t=J(r,u,f);v=k(c,t,r)}}var y,w;return{stats:{original_gravity:s(f,3),final_gravity:s(p,3),alcohol_by_volume:s(b,1),ibu_estimate:s(v,1),color_estimate:s(d,1)},volumes:g,mash:_,boil:h}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,