!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.brewcalc=t():e.brewcalc=t()}(window,(function(){return function(e){var t={};function r(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(a,o,function(t){return e[t]}.bind(null,o));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=4)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.roundMeasurable=t.getMeasurableValue=t.isMeasurable=t.isObject=t.round=t.isNotEmptyArray=t.capitalize=t.sum=t.lovibondToSrm=t.srmToLovibond=t.ebcToSrm=t.srmToEbc=t.sgToBrix=t.brixToSG=t.platoToSG=t.sgToPlato=t.psiTokpa=t.kpaToPsi=t.celsiusToFahrenheit=t.fahrenheitToCelsius=t.gallonsToLiters=t.litersToGallons=t.ouncesToLiters=t.litersToOunces=t.poundsTokg=t.kgToPounds=t.kgToOunces=void 0;t.kgToOunces=e=>35.2739619*e;t.kgToPounds=e=>t.kgToOunces(e)/16;t.poundsTokg=e=>e/2.204;t.litersToOunces=e=>e/.0295735;t.ouncesToLiters=e=>.0295735*e;t.litersToGallons=e=>t.litersToOunces(e)/128;t.gallonsToLiters=e=>t.ouncesToLiters(128*e);t.fahrenheitToCelsius=e=>(e-32)/1.8;t.celsiusToFahrenheit=e=>1.8*e+32;t.kpaToPsi=e=>.14503773773020923*e;t.psiTokpa=e=>6.894757293168361*e;t.sgToPlato=e=>1111.14*e-616.868-630.272*Math.pow(e,2)+135.997*Math.pow(e,3);t.platoToSG=e=>1+e/(258.6-e/258.2*227.1);t.brixToSG=e=>e/(258.6-e/258.2*227.1)+1;t.sgToBrix=e=>1262.7749*e-669.5622-775.6821*Math.pow(e,2)+182.4601*Math.pow(e,3);t.srmToEbc=e=>1.97*e;t.ebcToSrm=e=>.508*e;t.srmToLovibond=e=>(e+.76)/1.3546;t.lovibondToSrm=e=>1.3546*e-.76;t.sum=e=>e.reduce((e,t)=>e+t,0);t.capitalize=e=>e.split(" ").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join(" ");function a(e,t=0){return"number"==typeof e?Number(e.toFixed(t)):null}function o(e){return null!=e&&"object"==typeof e}function n(e){return o(e)&&e.hasOwnProperty("value")&&e.hasOwnProperty("unit")}t.isNotEmptyArray=e=>!!Array.isArray(e)&&e.length>0,t.round=a,t.isObject=o,t.isMeasurable=n,t.getMeasurableValue=function(e){return n(e)?e.value:null};t.roundMeasurable=(e,t)=>({unit:e.unit,value:a(e.value,t)})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertMeasurableValue=void 0;const a=r(2);t.convertMeasurableValue=(e,t,r=4)=>a.convert(e.value,e.unit,t,r)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convert=void 0;const a=r(9),o=(e,t)=>+e.toFixed(t);t.convert=(e,t,r,n)=>{if(null==e)throw new Error("Unable to convert null or undefined!");let u=null,i=null;for(const e in a.default){const o=a.default[e];for(const e in o){const a=o[e];a.units.hasOwnProperty(t)&&(u={unit:a.units[t],system:a}),a.units.hasOwnProperty(r)&&(i={unit:a.units[r],system:a})}if(null!=u&&null==i)throw new Error(`Unable to convert [${e}] unit [${t}] to [${r}]!`);if(null==u&&null!=i)throw new Error(`Unable to convert [${t}] to [${e}] unit [${r}]!`);if(null!=u&&null!=i)break}if(null==u)throw new Error(`Unit not found [${t}]!`);if(null==i)throw new Error(`Unit not found [${r}]!`);const s=null!=i.unit.precision?i.unit.precision:2,l=null!=n?n:s;if(t===r)return o(e,l);let c=e*u.unit.ratio;return u.system!==i.system&&(c=i.system.fromBase(u.system.toBase(c))),c/=i.unit.ratio,o(c,l)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.boilTime=t.use=void 0;t.use=(e={})=>({add_to_boil:"add_to_boil"===e.use,add_to_mash:!e.use||"add_to_mash"===e.use});t.boilTime=(e={})=>"add_to_boil"===e.use?e.time.value:0},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.yeastStarterGrow=t.yeastNeeded=t.yeastCount=t.carbonation=t.calcCalories=t.recalculateMashSteps=t.calcMashGrainWeight=t.calcMashVolumes=t.calcBoilVolumes=t.calculateRecipeBeerJSON=t.bitternessRatio=t.bitternessIbuTinseth=t.bitternessIbuRager=t.calcABV=t.srmToRgb=t.srmToCss=t.calcColor=t.calcBoilGravity=t.calcFinalGravity=t.calcOriginalGravity=t.convertMeasurableValue=t.convert=void 0;const a=r(5);Object.defineProperty(t,"yeastCount",{enumerable:!0,get:function(){return a.yeastCount}}),Object.defineProperty(t,"yeastNeeded",{enumerable:!0,get:function(){return a.yeastNeeded}}),Object.defineProperty(t,"yeastStarterGrow",{enumerable:!0,get:function(){return a.yeastStarterGrow}});const o=r(7);Object.defineProperty(t,"calcCalories",{enumerable:!0,get:function(){return o.calcCalories}}),Object.defineProperty(t,"carbonation",{enumerable:!0,get:function(){return o.carbonation}});const n=r(8);Object.defineProperty(t,"bitternessIbuRager",{enumerable:!0,get:function(){return n.bitternessIbuRager}}),Object.defineProperty(t,"bitternessIbuTinseth",{enumerable:!0,get:function(){return n.bitternessIbuTinseth}}),Object.defineProperty(t,"bitternessRatio",{enumerable:!0,get:function(){return n.bitternessRatio}});const u=r(0),i=r(1);Object.defineProperty(t,"convertMeasurableValue",{enumerable:!0,get:function(){return i.convertMeasurableValue}});const s=r(2);Object.defineProperty(t,"convert",{enumerable:!0,get:function(){return s.convert}});const l=r(10);Object.defineProperty(t,"calcMashGrainWeight",{enumerable:!0,get:function(){return l.calcMashGrainWeight}}),Object.defineProperty(t,"recalculateMashSteps",{enumerable:!0,get:function(){return l.recalculateMashSteps}});const c=r(11);Object.defineProperty(t,"calcBoilVolumes",{enumerable:!0,get:function(){return c.calcBoilVolumes}}),Object.defineProperty(t,"calcMashVolumes",{enumerable:!0,get:function(){return c.calcMashVolumes}});const b=r(12);Object.defineProperty(t,"calcOriginalGravity",{enumerable:!0,get:function(){return b.calcOriginalGravity}}),Object.defineProperty(t,"calcFinalGravity",{enumerable:!0,get:function(){return b.calcFinalGravity}}),Object.defineProperty(t,"calcBoilGravity",{enumerable:!0,get:function(){return b.calcBoilGravity}});const m=r(13);Object.defineProperty(t,"srmToCss",{enumerable:!0,get:function(){return m.srmToCss}}),Object.defineProperty(t,"srmToRgb",{enumerable:!0,get:function(){return m.srmToRgb}}),Object.defineProperty(t,"calcColor",{enumerable:!0,get:function(){return m.calcColor}});const d=r(14);Object.defineProperty(t,"calcABV",{enumerable:!0,get:function(){return d.calcABV}});t.calculateRecipeBeerJSON=(e,t,r)=>{const{batch_size:a,boil:o,efficiency:i,ingredients:s}=e,{fermentable_additions:f,hop_additions:p,culture_additions:v}=s;let g={unit:"sg",value:null},y={unit:"sg",value:null},h={unit:"SRM",value:null},_={unit:"IBUs",value:null},M={unit:"%",value:null},T=null,O=null,B=null;if(u.isNotEmptyArray(f)){g=b.calcOriginalGravity(a,f,i);const e={name:"Default Culture",type:"ale",form:"liquid",attenuation:{value:75,unit:"%"}};y=b.calcFinalGravity(a,f,i,u.isNotEmptyArray(v)?v:[e]),M=d.calcABV(g,y);const{pre_boil_size:s}=c.calcBoilVolumes(a,o,r);if(T={pre_boil_size:s},t){const e=l.calcMashGrainWeight(f),a=l.recalculateMashSteps(t.mash_steps,t.grain_temperature,e),{sparge_volume:o,mash_volume:n,total_volume:u}=c.calcMashVolumes(s,a,e,r);T=Object.assign(Object.assign({},T),{sparge_volume:o,mash_volume:n,total_volume:u}),O=Object.assign(Object.assign({},t),{mash_steps:l.updateSpargeVolume(a,o)})}if(o&&(B=Object.assign(Object.assign({},o),{pre_boil_size:s})),h=m.calcColor(f,a),u.isNotEmptyArray(p)){const e=b.calcBoilGravity(a,s,g);_=n.bitternessIbuTinseth(p,e,a)}}return{stats:{original_gravity:u.roundMeasurable(g,3),final_gravity:u.roundMeasurable(y,3),alcohol_by_volume:u.roundMeasurable(M,1),ibu_estimate:u.roundMeasurable(_,1),color_estimate:u.roundMeasurable(h,1)},volumes:T,mash:O,boil:B}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.yeastStarterGrow=t.yeastCount=t.yeastNeeded=void 0;const a=r(0),o=r(6);t.yeastNeeded=(e,t,r)=>e*(1e3*t)*r/1e3;t.yeastCount=({amount:e,form:t,cultureDate:r},a=(new Date).toString(),n=8,u=1)=>{switch(t){case o.YeastForms.dry:return n*e*1e3;case o.YeastForms.liquid:return((e,t=(new Date).toString())=>100-.7*Math.floor((Date.parse(e)-Date.parse(t))/864e5))(a,r)/100*100*e;case o.YeastForms.slant:return u*e*1e3;default:throw new Error("NotImplementedError")}};const n=e=>2.33-.67*e;t.yeastStarterGrow=(e,t,r,o)=>{const u=a.litersToGallons(t)*(r-1)*1e3/42,i=1e3*a.poundsTokg(u),s=(l=e/i)<1.4?1.4:l>=1.4&&l<=3.5&&n(l)>0?n(l):0;var l;const c=i*s+e;return{growthRate:s,endingCount:c,pitchRate:1e3*c/a.sgToPlato(r)/(o/1e3)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.YeastForms=t.YeastTypes=void 0,t.YeastTypes={ale:"Ale",lager:"Lager",wheat:"Wheat",wine:"Wine",champagne:"Champagne"},t.YeastForms={liquid:"Liquid",dry:"Dry",slant:"Slant",culture:"Culture"}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.calcCalories=t.carbonation=void 0;const a=r(0),o=(e,t)=>Math.max(0,-16.6999-.0101059*t+.00116512*t*t+.173354*t*e+4.24267*e-.0684226*e*e),n=e=>Math.max(32,a.celsiusToFahrenheit(e));t.carbonation=(e,t,r)=>{const u=((e,t,r)=>15.195*r*(e-3.0378+.050062*t-26555e-8*t*t))(e,n(t),a.litersToGallons(r));return{kegPressure:o(e,n(t)),kegSugar:.5*u,cornSugar:u,dme:1.538*u}};t.calcCalories=(e,t)=>((e,t)=>1881.22*t*((e-t)/(1.775-e)))(e,t)+((e,t)=>3550*t*(.1808*e+.8192*t-1.0004))(e,t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bitternessIbuRager=t.bitternessRatio=t.bitternessIbuTinseth=void 0;const a=r(0),o=r(1),n=r(3),u=(e,t)=>e*t,i=(e="")=>"pellet"===e?1.1:1,s=(e="",t,r=0)=>i(e)*(e=>1.65*Math.pow(125e-6,e-1))(t)*(e=>(1-Math.exp(-.04*e))/4.15)(r);t.bitternessIbuTinseth=(e,t,r)=>({value:a.sum(e.map(({amount:e,alpha_acid:a,form:i,timing:l})=>{if(!n.use(l).add_to_boil)return 0;const c=u(o.convertMeasurableValue(e,"oz"),a.value);return s(i,o.convertMeasurableValue(t,"sg"),n.boilTime(l))*c*74.89/o.convertMeasurableValue(r,"gal")})),unit:"IBUs"});t.bitternessRatio=(e,t)=>e/t;const l=(e,t,r)=>{if(!n.use(e.timing).add_to_boil)return 0;var a;return(a=Math.floor(n.boilTime(e.timing)+.5),(18.11+13.86*Math.tanh((a-31.32)/18.27))*i(e.form)/100)*u(e.amount.value,e.alpha_acid.value)*74.89/r.value/(1+((o=t.value)<=1.05?0:(o-1.05)/.2));var o};t.bitternessIbuRager=(e,t,r)=>({value:a.sum(e.map(e=>l(e,t,r))),unit:"IBUs"})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=r(0);t.default={mass:{metric:{toBase:e=>e,fromBase:e=>e,units:{mg:{ratio:.001},g:{ratio:1},kg:{ratio:1e3}}},us:{toBase:e=>453.592*e,fromBase:e=>e/453.592,units:{lb:{ratio:1},oz:{ratio:1/16}}}},volume:{metric:{toBase:e=>e,fromBase:e=>e,units:{l:{ratio:1},ml:{ratio:.001}}},imperial:{toBase:e=>1.136523*e,fromBase:e=>e/1.136523,units:{ifloz:{ratio:1/40},ipt:{ratio:.5},iqt:{ratio:1},igal:{ratio:4},ibbl:{ratio:144}}},us:{toBase:e=>.946353*e,fromBase:e=>e/.946353,units:{tsp:{ratio:1/192},tbsp:{ratio:1/64},floz:{ratio:1/32},cup:{ratio:1/4},pt:{ratio:.5},qt:{ratio:1},gal:{ratio:4},bbl:{ratio:124}}}},color:{lovibond:{toBase:a.lovibondToSrm,fromBase:a.srmToLovibond,units:{Lovi:{ratio:1}}},ebc:{toBase:a.ebcToSrm,fromBase:a.srmToEbc,units:{EBC:{ratio:1}}},srm:{toBase:e=>e,fromBase:e=>e,units:{SRM:{ratio:1},srm:{ratio:1}}}},gravity:{sg:{toBase:e=>e,fromBase:e=>e,units:{sg:{ratio:1,precision:4}}},plato:{toBase:a.platoToSG,fromBase:a.sgToPlato,units:{plato:{ratio:1}}},brix:{toBase:a.brixToSG,fromBase:a.sgToBrix,units:{brix:{ratio:1}}}},temperature:{celsius:{toBase:e=>e,fromBase:e=>e,units:{C:{ratio:1,precision:0}}},fahrenheit:{toBase:a.fahrenheitToCelsius,fromBase:a.celsiusToFahrenheit,units:{F:{ratio:1,precision:0}}}},time:{time:{toBase:e=>e,fromBase:e=>e,units:{sec:{ratio:1/60},min:{ratio:1},hr:{ratio:60},day:{ratio:1440},week:{ratio:10080},month:{ratio:43200},year:{ratio:525600}}}},pressure:{pressure:{toBase:e=>e,fromBase:e=>e,units:{kPa:{ratio:1},atm:{ratio:101.325},bar:{ratio:100},psi:{ratio:6.894757}}}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateSpargeVolume=t.calcMashGrainWeight=t.recalculateMashSteps=void 0;const a=r(0),o=r(1),n=r(3);t.recalculateMashSteps=function(e,t,r){let n=0,u=t.value;const i=o.convertMeasurableValue(r,"kg");return e.map((e,t)=>{const r=a.getMeasurableValue(e.step_temperature);switch(e.type){case"decoction":{const{amount:t}=((e,t,r,a,o=0,n=0,u=0)=>{const i=.652*a+r;let s=(.38*a+n*((e,t,r)=>(e*=.8)>0&&t<e?r*t/e:r)(u,i,o)+r)/(.38*a+r)*(t-e)/(100-e);return s>1&&(s=1),{amount:{value:i*s,unit:"l"}}})(u,r,n,i);return Object.assign(Object.assign({},e),{amount:t})}case"infusion":{const{amount:a,infuse_temperature:o}=((e,t,r,a,o)=>{const n=a>0?100:.38*(t-e)/2.5+t;return{infuse_temperature:{unit:"C",value:n},amount:{unit:"l",value:(.38*o+r)*(t-e)/(n-t)}}})(u,r,n,t,i);return n+=a.value,u=r,Object.assign(Object.assign({},e),{infuse_temperature:o,amount:a})}default:return e}})};t.calcMashGrainWeight=e=>({value:a.sum(e.map(({timing:e,type:t,amount:r})=>"grain"===t&&n.use(e).add_to_mash?o.convertMeasurableValue(r,"lb"):0)),unit:"lb"}),t.updateSpargeVolume=function(e,t){return e.map(e=>"sparge"===e.type?Object.assign(Object.assign({},e),{amount:t}):e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.calcBoilVolumes=t.calcMashVolumes=void 0;const a=r(0),o=r(1),n={pre_boil_size:{value:0,unit:"gal"},boil_time:{value:0,unit:"min"}},u=e=>o.convertMeasurableValue(e,"gal");t.calcMashVolumes=(e,t,r,n)=>{const i=((e=[])=>({value:a.sum(e.map(({type:e,amount:t})=>"infusion"===e?u(t):0)),unit:"gal"}))(t),s=(l=r,{value:.12*o.convertMeasurableValue(l,"lb"),unit:"gal"});var l;const c=null!=n.mash_tun?u(n.mash_tun.loss):0,b={value:u(e)+s.value-i.value+c,unit:"gal"};return{mash_volume:i,sparge_volume:b,total_volume:{value:i.value+b.value,unit:"gal"}}};t.calcBoilVolumes=(e,t=n,r)=>{const a=t||n,o=u(e);let i=0,s=0;null!=r&&null!=r.brew_kettle&&(i=u(r.brew_kettle.loss),s=u(r.brew_kettle.boil_rate_per_hour));return{pre_boil_size:{value:o+s*a.boil_time.value/60+i+.04*o,unit:"gal"}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.calcBoilGravity=t.calcFinalGravity=t.calcOriginalGravity=t.calcTotalGravityPoints=void 0;const a=r(0),o=r(1),n=e=>({value:.01*e.value*46/1e3+1,unit:"sg"}),u=(e,t={value:100,unit:"%"},r={value:0,unit:"%"})=>{const a=o.convertMeasurableValue(e.amount,"lb");var u;return(o.convertMeasurableValue(null!=(u=e.yield).potential?u.potential:null!=u.fine_grind?n(u.fine_grind):null!=u.coarse_grind?n(u.coarse_grind):{value:0,unit:"sg"},"sg")-1)*a*((1-r.value/100)*((e,t,r=1)=>"extract"===e||"sugar"===e||"dry extract"===e?r:t)(e.type,t.value/100))};t.calcTotalGravityPoints=(e,t,r)=>a.sum(e.map(e=>u(e,t.brewhouse,r)));const i=(e,t)=>1+t/o.convertMeasurableValue(e,"gal");t.calcOriginalGravity=(e,r,a)=>({unit:"sg",value:i(e,t.calcTotalGravityPoints(r,a))});t.calcFinalGravity=(e,r,a,o)=>({unit:"sg",value:i(e,t.calcTotalGravityPoints(r,a,o[0].attenuation))});t.calcBoilGravity=(e,t,r)=>{return{unit:"sg",value:(a=o.convertMeasurableValue(e,"gal"),n=o.convertMeasurableValue(t,"gal"),u=o.convertMeasurableValue(r,"sg"),1+(u-1)*a/n)};var a,n,u}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.srmToCss=t.srmToRgb=t.calcColor=void 0;const a=r(0),o=r(1);t.calcColor=(e,t)=>{const r=e.map(e=>{return t=o.convertMeasurableValue(e.amount,"lb"),(r=o.convertMeasurableValue(e.color,"Lovi"))>.56?t*r:0;var t,r});var n;return{unit:"SRM",value:(n=a.sum(r)/o.convertMeasurableValue(t,"gal"),1.4922*Math.pow(n,.6859))}};t.srmToRgb=e=>({r:Math.round(Math.min(255,Math.max(0,255*Math.pow(.975,e)))),g:Math.round(Math.min(255,Math.max(0,255*Math.pow(.88,e)))),b:Math.round(Math.min(255,Math.max(0,255*Math.pow(.7,e))))});t.srmToCss=e=>{const r=t.srmToRgb(e);return`rgb(${r.r}, ${r.g}, ${r.b})`}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.calcABV=t.estABV=t.estABW=void 0;const a=r(0),o=r(1);t.estABW=(e,t)=>.105*(e-t);t.estABV=(e,t)=>.132*(e-t);const n=(e,t)=>{const r=a.sgToPlato(e);return(r-(.1808*r+.8192*a.sgToPlato(t)))/(2.0665-.010665*r)*(t/.79661)};t.calcABV=(e,t)=>({value:n(o.convertMeasurableValue(e,"sg"),o.convertMeasurableValue(t,"sg")),unit:"%"})}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,